// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220218102747_demandUpdate")]
    partial class demandUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("EntityLayer.Concrete.Demand", b =>
                {
                    b.Property<int>("DemandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DemandContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DemandCreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DemandStatus")
                        .HasColumnType("bit");

                    b.Property<string>("DemandTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DemandId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Demands");
                });

            modelBuilder.Entity("EntityLayer.Concrete.DemandAnswer", b =>
                {
                    b.Property<int>("DemandAnswersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DemandAnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DemandId")
                        .HasColumnType("int");

                    b.HasKey("DemandAnswersId");

                    b.HasIndex("DemandId");

                    b.ToTable("DemandAnswers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.DemandFile", b =>
                {
                    b.Property<int>("DemandFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DemandFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DemandId")
                        .HasColumnType("int");

                    b.HasKey("DemandFileId");

                    b.HasIndex("DemandId");

                    b.ToTable("DemandFiles");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Firm", b =>
                {
                    b.Property<int>("FirmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FirmMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FirmStatus")
                        .HasColumnType("bit");

                    b.Property<int>("FirmTaxNo")
                        .HasColumnType("int");

                    b.Property<string>("FirmTelNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FirmId");

                    b.ToTable("Firms");
                });

            modelBuilder.Entity("EntityLayer.Concrete.FirmService", b =>
                {
                    b.Property<int>("FirmServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("FirmId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("FirmServiceId");

                    b.HasIndex("FirmId");

                    b.HasIndex("ServiceId");

                    b.ToTable("FirmServices");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ServiceAbout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("EntityLayer.Concrete.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("UserApplicationFirm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UserStatus")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Demand", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Service", "service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("service");
                });

            modelBuilder.Entity("EntityLayer.Concrete.DemandAnswer", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Demand", "Demand")
                        .WithMany()
                        .HasForeignKey("DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demand");
                });

            modelBuilder.Entity("EntityLayer.Concrete.DemandFile", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Demand", "Demand")
                        .WithMany()
                        .HasForeignKey("DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demand");
                });

            modelBuilder.Entity("EntityLayer.Concrete.FirmService", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Firm", "Firm")
                        .WithMany()
                        .HasForeignKey("FirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Firm");

                    b.Navigation("Service");
                });
#pragma warning restore 612, 618
        }
    }
}
